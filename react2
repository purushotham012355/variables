To create an element in react js
--React.createElement()
Syntax:
Type = tag name(h1 ,p ,div)
Prop =class ,id
ReactDOM.createRoot() -  to render the element
Html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div id="a"></div>
    <script>
        const b=React.createElement('h1',{id:'c'},"I am ravi")
        const e=document.getElementById('a')
        const root =ReactDOM.createRoot(e)
        root.render(b)
    </script>
</body>
</html>
JSX:
---Javascript xml
	It is a syntax extension for javascript
	--jsx allows us to write HTML code in react js
	Jsx all the html tags ,must be cosed
	<!DOCTYPE html>
	<html lang="en">
	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	    <title>Document</title>
	    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
	    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
	    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
	</head>
	<body>
	    
	    <div id="a"></div>
	    <script type="text/babel">
	    const n=5
	    const element=<h1>React is {n*2} times better than js</h1>
	    const e=document.getElementById('a')
	    const root = ReactDOM.createRoot(e);
	    root.render(element)
	    </script>
	
	    
	</body>
	</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div> 
<script type="text/babel">
    const App=()=>{
        const isLoggedIn=true;
        return(
            <div>
                {isLoggedIn ? (<h1>Welcome back,user!</h1>):(<h1>Please login</h1>)}
                {isLoggedIn && (<h1>You have a new notification</h1>)}
            </div>
        )
    }
    const root=ReactDOM.createRoot(document.getElementById('root'))
    root.render(<App/>)
</script>
</body>
</html>

Functions:
Using a function call:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="a"> </div>
    <script type="text/babel">
        function getGreeeting(name){
            return `Hello,${name}! Welcome to react`
        }

        function Greeting(){
            const name="kavya"
            return <h1>{getGreeting(name)} </h1>
        }
        const root = ReactDOM.createRoot(document.getElementById('a'))
        root.render(<Greeting/>)
    </script>
</body>
</html>


import { useEffect, useState } from "react";
import axios from "axios";
import "./Mobiles.css";

const Mobiles = () => {
    const [mobiles, setMobiles] = useState([]); // Initialize as an empty array

    const getMobiles = async () => {
        try {
            const res = await axios.get("http://localhost:9000/mobiles");
            setMobiles(res.data);
        } catch (error) {
            console.error("Error fetching mobiles:", error);
        }
    };

    useEffect(() => {
        getMobiles();
    }, []);

    return (
        <div className="parent">
            {mobiles.length > 0 ? (
                mobiles.map((element, index) => (
                    <div className="child" key={index}>
                        <img src={element.pimage} alt={element.pname} />
                        <h4>{element.pname}</h4>
                        <h4>Price: ${element.pcost}</h4>
                        <h4>Stock: {element.qty}</h4>
                    </div>
                ))
            ) : (
                <p>Loading mobiles...</p>
            )}
        </div>
    );
};

export default Mobiles;

